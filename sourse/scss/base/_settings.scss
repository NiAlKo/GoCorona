// /*!=================-SETTINGS-=================!*/

// // Mixin for adaptive layers
// /* For use css without mixin
// selector {
// 	property: calc(minSize+(lauoytSize-numberMin)*((100vh-320px)/(maxWidth-320)));
// 	}
// */
$maxWidth: size;
$maxWidthContainer: size;

@mixin adaptive-value($property, $startSize, $minSize, $type) {
  $addSize: $startSize - $minSize;
  @if $type == 1 {
    // if < container
    #{$property}: $startSize + px;
    @media (max-width: #{$maxWidthContainer + px}) {
      #{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vh-320px) / #{$maxWidthContainer - 320}));
    }
  } @else if $type == 2 {
    // if > container
    #{$property}: $startSize + px;
    @media (min-width: #{$maxWidthContainer + px}) {
      #{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vh-320px) / #{$maxWidth - 320}));
    }
  } @else {
    // always
    #{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vh-320px) / #{$maxWidth - 320}));
  }
} // @include adaptive-value("padding", 50, 20, 0);

// Ð¡onversion to other units
// To %
// @function prc($pxOne, $pxTwo) {
//   $result: math.div($px, 16) * 100%;
//   @return $result;
// }
// // To REM
// @function rem($px) {
//   $result: math.div($px, 16) + rem;
//   @return $result;
// }
// // To EM
// @function em($px) {
//   $result: math.div($px, 16) + em;
//   @return $result;
// }
